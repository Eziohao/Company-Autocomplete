{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.svg"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInput","bind","assertThisInitialized","state","searchName","company","error","event","_this2","companyName","target","value","setState","fetch","concat","then","res","ok","json","Error","statusText","companies","catch","err","message","react_default","a","createElement","className","src","logo","alt","type","placeholder","onChange","App_ShowCompany","React","Component","ShowCompany","listItems","map","key","domain","name","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oRAKMA,qBACJ,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,YAAYP,EAAKO,YAAYC,KAAjBP,OAAAQ,EAAA,EAAAR,CAAAD,IACjBA,EAAKU,MAAM,CAACC,WAAW,GAAGC,QAAQ,GAAGC,MAAM,IAH1Bb,2EAKNc,GAAM,IAAAC,EAAAZ,KACZa,EAAYF,EAAMG,OAAOC,MAC7Bf,KAAKgB,SAAS,CAACR,WAAWK,IAC1BI,MAAK,gEAAAC,OAAiEL,IACrEM,KAAK,SAAAC,GACJ,GAAGA,EAAIC,GACL,OAAOD,EAAIE,OAEb,MAAM,IAAIC,MAAMH,EAAII,cAErBL,KAAK,SAAAM,GACJb,EAAKI,SAAS,CAACP,QAAQgB,MAExBC,MAAM,SAAAC,GAELf,EAAKI,SAAS,CAACN,MAAMiB,EAAIC,6CAK3B,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAQJ,UAAU,YAAYK,YAAY,eAAeC,SAAUtC,KAAKI,cACpFyB,EAAAC,EAAAC,cAAA,iBAAS/B,KAAKO,MAAMC,YACrBqB,EAAAC,EAAAC,cAACQ,EAAD,CAAad,UAAWzB,KAAKO,MAAME,QAASkB,IAAK3B,KAAKO,MAAMG,iBAjC/C8B,IAAMC,YAuCjBC,cACJ,SAAAA,EAAY9C,GAAO,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,GAAA5C,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4C,GAAAvC,KAAAH,KACXJ,0EAGN,IAAM6B,EAAUzB,KAAKJ,MAAM6B,UACrBE,EAAI3B,KAAKJ,MAAM+B,IACtB,GAAGF,IAAYE,EAAI,CACjB,IAAMgB,EAAUlB,EAAUmB,IAAI,SAACnC,GAC7B,OACCoB,EAAAC,EAAAC,cAAA,MAAIc,IAAKpC,EAAQqC,QACjBjB,EAAAC,EAAAC,cAAA,UAAKtB,EAAQsC,MACblB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGiB,KAAMvC,EAAQqC,OAAQd,UAAU,YAAYvB,EAAQqC,SAC3DjB,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,OAAKE,IAAKxB,EAAQyB,WAIzB,OACEL,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,mBAEJY,IAKF,OAAGhB,EAEJE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,UAAiCL,GAI5B,UApCea,IAAMC,WA4ClB9C,IC5EKsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1C,KAAK,SAAA2C,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.b5027b92.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props){\n   super(props);\n   this.handleInput=this.handleInput.bind(this);\n   this.state={searchName:'',company:'',error:''}; \n  }\n  handleInput(event){\n    let companyName=event.target.value;\n    this.setState({searchName:companyName});\n    fetch(`https://autocomplete.clearbit.com/v1/companies/suggest?query=${companyName}`)\n    .then(res=>{\n      if(res.ok){\n        return res.json();\n      }\n      throw new Error(res.statusText)\n    })\n    .then(companies=>{\n      this.setState({company:companies})\n    })\n    .catch(err=>{\n      //console.log(err.message);\n      this.setState({error:err.message})\n    })\n  }\n\n  render() { \n    return (  \n    <div className=\"App\">\n    <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <h2>What company do you want to search?</h2>\n      <input type=\"text\"  className=\"App-input\" placeholder=\"Company name\" onChange={this.handleInput}/>\n      <p>Name:{this.state.searchName}</p>\n     <ShowCompany companies={this.state.company} err={this.state.error}/>\n    </header>\n   \n  </div> );\n  }\n}\n class ShowCompany extends React.Component{\n   constructor(props){\n     super(props);\n   }\n   render(){\n     const companies=this.props.companies;\n     const err=this.props.err;\n    if(companies&&!err){\n      const listItems=companies.map((company)=>{\n        return(\n         <tr key={company.domain}>\n         <td>{company.name}</td>\n         <td><a href={company.domain} className=\"App-link\">{company.domain}</a></td>\n         <td><img src={company.logo} /></td>\n       </tr>\n        )\n      })\n      return(\n        <table>\n          <tbody>\n            <tr>\n              <th>Name</th>\n              <th>Domain</th>\n              <th>Logo</th>\n            </tr>\n         {listItems}\n          </tbody>\n        </table>\n      )\n    }\n   else if(err){\n     return(\n       <p className=\"error-msg\">ERROR! {err}</p>\n     )\n   }\n   else{\n     return '';\n   }\n  \n   }\n }\n \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}